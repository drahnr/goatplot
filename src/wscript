#! /usr/bin/env python3
# encoding: utf-8

def options(opt):
	opt.load('compiler_c gnu_dirs glib2')

def configure(cfg):
	cfg.load('compiler_c gnu_dirs glib2')

	cfg.check_cc(lib='m', uselib_store='M', mandatory=True)

	cfg.check_cfg(atleast_pkgconfig_version='0.26')
	cfg.check_cfg(package='glib-2.0', uselib_store='GLIB', args=['glib-2.0 >= 2.24', '--cflags', '--libs'], mandatory=True)
	cfg.check_cfg(package='gobject-2.0', uselib_store='GOBJECT', args=['--cflags', '--libs'], mandatory=True)
	cfg.check_cfg(package='gtk+-3.0', uselib_store='GTK3', args=['--cflags', '--libs'], mandatory=True)

	cfg.check_large_file(mandatory=False)
	cfg.check_endianness(mandatory=False)
	cfg.check_inline(mandatory=False)


def build(bld):
	objects = bld.objects(
		features = ['c', 'glib2'],
		target = 'objects',
		source = bld.path.ant_glob(['*.c'], excl='main.c'),
		includes = ['.'],
		export_includes = ['.'],
		cflags = ['-fPIC'],
		uselib = 'M GOBJECT GLIB GTK3'
	)

	shlib = bld.shlib(
		features = ['c', 'cshlib', 'glib2'],
		target = bld.env.LIBNAME,
		source = [],
		use = 'objects',
		includes = ['.'],
		export_includes = ['.'],
		uselib = 'M GOBJECT GLIB GTK3',
		install_path = "${LIBDIR}"
	)
	bld.install_files('${INCLUDEDIR}/goatplot/', bld.path.ant_glob(['*.h'], excl=['*-internal.h']))



from waflib.Context import Context

def codestyle_fun(ctx):
    	import os
	cmd = "clang-format -i -style=file {}".format(' '.join(map(lambda node: str(node.abspath()), ctx.path.ant_glob(['*.c']))))
 	print(cmd)
	os.system(cmd)

class codestyle(Context):
    	"""format code properly"""
    	cmd = 'codestyle'
    	fun = 'codestyle_fun'
