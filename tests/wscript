#! /usr/bin/env python3
# encoding: utf-8

def options(opt):
	opt.load('compiler_c glib2')
	opt.load('unites', tooldir='.wafcustom')

def configure(cfg):
	cfg.load('compiler_c glib2')
	cfg.load('unites', tooldir='.wafcustom')

def build(bld):
	bld.load('compiler_c glib2')
	bld.load('unites', tooldir='.wafcustom')

	includes = ['../src']

	bld.env.CFLAGS = ['-ggdb', '-Wall']

	test_screenshot = bld.program(
		features = ['c', 'glib2'],
		target = 'test-screenshot',
		source = ['screenshot.c'],
		includes = includes,
		export_includes = includes,
		use = 'objects',
		uselib = 'M GOBJECT GLIB GTK3',
		install_path = None
	)

	test_dynamic = bld.program(
		features = ['c', 'glib2'],
		target = 'test-dynamic',
		source = ['dynamic.c'],
		includes = includes,
		export_includes = includes,
		use = 'objects',
		uselib = 'M GOBJECT GLIB GTK3',
		install_path = None
	)

	test_glade = bld.program(
	    features = ['c', 'glib2'],
	    target = 'test-glade-line',
	    source = ['glade-line.c'],
	    includes = includes,
	    export_includes = includes,
	    use = 'objects',
	    uselib = 'M GOBJECT GLIB GTK3',
	    install_path = None
	)


from waflib.Context import Context

def codestyle_fun(ctx):
	import os
	cmd = "clang-format -i -style=file {}".format(' '.join(map(lambda node: str(node.abspath()), ctx.path.ant_glob(['*.[ch]']))))
	os.system(cmd)

class codestyle(Context):
	"""format code properly"""
	cmd = 'codestyle'
	fun = 'codestyle_fun'

